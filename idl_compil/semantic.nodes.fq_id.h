//================================================================================================================================================
//
// (c) GIE 15.04.2005
//
//================================================================================================================================================
#ifndef H_GUARD_SEMANTIC_NODES_FQ_ID_H__15_04_2005__19_38_26
#define H_GUARD_SEMANTIC_NODES_FQ_ID_H__15_04_2005__19_38_26
//================================================================================================================================================
#pragma once
//================================================================================================================================================
#include "utility.countable.h"

#include "boost/intrusive_ptr.hpp"
#include "boost/noncopyable.hpp"
#include <list>
//================================================================================================================================================
namespace gie_idl {
    
    struct fq_id_t
        : ::gie::ref_countable<fq_id_t>
        , ::std::list<std::string>
        , ::boost::noncopyable
    {
        bool is_fq()const
        {
            const const_iterator& i = begin();
            const const_iterator& i_end = end();
            if( i==i_end )
            {
                GIE_LIB_NOT_IMPLEMENTED;
            }
            else
            {
                #ifdef GIE_LIB_DEBUG
                    const string_t& str = *i;
                #endif
                if( i->empty() ) return true;
            }
            return false;
        }
    };

    typedef boost::intrusive_ptr<fq_id_t> fq_id_ptr_t;

    inline
    fq_id_ptr_t create_fq_id()
    {
        return fq_id_ptr_t( new fq_id_t );
    }
}
//================================================================================================================================================
#endif//H_GUARD_SEMANTIC_NODES_FQ_ID_H__15_04_2005__19_38_26
//================================================================================================================================================
