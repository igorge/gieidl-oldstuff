//================================================================================================================================================
//
// (c) GIE 03.06.2005
//
//================================================================================================================================================
#ifndef H_GUARD_COMPARABLE_INTERFACES_H__03_06_2005__20_18_16
#define H_GUARD_COMPARABLE_INTERFACES_H__03_06_2005__20_18_16
//================================================================================================================================================
#pragma once
//================================================================================================================================================
#include "gielib/giecom/giecom.guid.non_init.begin.h"
#
#   include "gielib/giecom/giecom.core.h"
#
#include "gielib/giecom/giecom.guid.non_init.end.h"

#include "boost/intrusive_ptr.hpp"
//================================================================================================================================================
namespace gie_idl {

    //
    // comparable_i
    //
    // {1B253126-2EA3-4bb5-B3BB-F14E9955E347}
    GIE_CCOM_RAW_GUID(comparable_iid, 0x1b253126, 0x2ea3, 0x4bb5, 0xb3, 0xbb, 0xf1, 0x4e, 0x99, 0x55, 0xe3, 0x47);
    struct comparable_i
        : ::gie::ccom::unknown_i
    {
        virtual bool GIE_LIB_FASTCALL equals(::gie::ccom::unknown_i* const)=0;
    };
    typedef ::boost::intrusive_ptr<comparable_i> comparable_ptr_t;

}
GIE_CCOM_BIND_GUID(gie_idl::comparable_i, gie_idl::comparable_iid);
//================================================================================================================================================
#endif//H_GUARD_COMPARABLE_INTERFACES_H__03_06_2005__20_18_16
//================================================================================================================================================
